import numpy as npimport tensorflow as tffrom tensorflow.keras.models import Sequentialfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2Dfrom tensorflow.keras.preprocessing.image import ImageDataGeneratorfrom tensorflow.keras.datasets import cifar10from tensorflow.keras.callbacks import TensorBoardimport matplotlib.pyplot as pltimport pickleimport osimport cv2import randomimport timeimport pandas as pdfrom sklearn import datasets,linear_modelfrom sklearn.model_selection import train_test_split# Name='Face-recognition_CNN-{}'.format(int(time.time()))# tensorboard=TensorBoard(log_dir='logs/{}'.format(Name))gpu_options=tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.333)sess=tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options))data_dir='/Users/aryn/Downloads/CoreML/OpenCV/images'categories=['Amit','Ankit','Aryan','Taha','Vishal','saket','Yashraj']img_size=50training_data = []def training():    for i in categories:        path=os.path.join(data_dir,i)        class_num=categories.index(i)        for img in os.listdir(path):            try:                img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)                new_array=cv2.resize(img_array,(img_size,img_size))                training_data.append([new_array,class_num])            except Exception:                pass                #print(e)training()print(len(training_data))random.shuffle(training_data)X=[]y=[]for features,labels in training_data:    X.append(features)    y.append(labels)X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)#print('test shape',X_test)X_train=np.array(X_train).reshape(-1,img_size,img_size,1)y_train=np.array(y_train)X_test=np.array(X_test).reshape(-1,img_size,img_size,1)y_test=np.array(y_test)pickle_out=open('X_train.pickle','wb')pickle.dump(X_train,pickle_out)pickle_out.close()pickle_out=open('y_train.pickle','wb')pickle.dump(y_test,pickle_out)pickle_out.close()X_train=pickle.load(open('X.pickle','rb'))y_train=pickle.load(open('y.pickle','rb'))X_train=X_train/255.0X_test = X_test/255.0dense_layers=[0,1,2]layer_sizes=[32,64,128]conv_layers=[1,2,3]for dense_layer in dense_layers:    for layer_size in layer_sizes:        for conv_layer in conv_layers:            Name="{}-conv-{}-nodes-{}-dense-{}".format(dense_layer,layer_size,conv_layer,int(time.time()))            tensorboard=TensorBoard(log_dir='logs/{}'.format(Name))            model=Sequential()            model.add(Conv2D(layer_size,(3,3),input_shape=X_train.shape[1:]))            model.add(Activation('relu'))            model.add(MaxPooling2D(pool_size=(2,2)))            for l in range(conv_layer-1):                model.add(Conv2D(layer_size,(3,3)))                model.add(Activation('relu'))                model.add(MaxPooling2D(pool_size=(2,2)))            model.add(Flatten()) #covert 3D to 1D vector            #model.add(Dense(64))            for l in range(dense_layer-1):                model.add(Dense(layer_size))                model.add(Activation('relu'))                model.add(Dropout(0.2))            model.add(Dense(7))            model.add(Activation('sigmoid'))            model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])            model.fit(X_train,y_train,batch_size=32,epochs=20,validation_split=0.8, callbacks=[tensorboard])test_loss,test_acc=model.evaluate(X_test,y_test)print("test_accuracy",test_acc)print('test_loss',test_loss)#Predictionimg=cv2.imread('1.jpg',cv2.IMREAD_GRAYSCALE)plt.imshow(img,cmap='gray')img_size=50new=cv2.resize(img,(img_size,img_size))new=np.array(new).reshape(-1,img_size,img_size,1)new=new/255.0a=model.predict(new)def softmax(x):    e_x = np.exp(x - np.max(x))    return e_x / e_x.sum()b=list(softmax(a))print(b)